C-----------------------------------------------------------------------
      include "cmtparticles.usrp"
C  nek5000 user-file template
C
C  user specified routines:
C     - userbc : boundary conditions
C     - useric : initial conditions
C     - uservp : variable properties
C     - userf  : local acceleration term for fluid
C     - userq  : local source term for scalars
C     - userchk: general purpose routine for checking errors etc.
C
c-----------------------------------------------------------------------
      subroutine cmt_userEOS(ix,iy,iz,eg)
      include 'SIZE'
      include 'NEKUSE'
      include 'PARALLEL'
      include 'CMTDATA'
      include 'PERFECTGAS'
      integer e,eg

      cp=cpgref
      cv=cvgref
      temp=e_internal/cv
      asnd=MixtPerf_C_GRT(gmaref,rgasref,temp)
      pres=MixtPerf_P_DRT(rho,rgasref,temp)
      return
      end
C-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,eg)
      include 'SIZE'
      include 'TOTAL'   ! this is not
      include 'CMTDATA' ! the best idea
      include 'NEKUSE'
      integer e,eg

      e = gllel(eg)

      i=ix+(iy-1)*ny1
!     artvisc=c_sub_e*gridh(i,e)**2*
!    >                   abs(res2(ix,iy,iz,e,1))/maxdiff
      artvisc=c_sub_e*meshh(e)**2*maxres(e)/maxdiff

      mu=0.0!rho*min(artvisc,t(ix,iy,iz,e,3))
c     mu=rho*min(artvisc,t(ix,iy,iz,e,3))
      nu_s=mu/rho

      mu=0.5*mu ! A factor of
           ! 2 lurks in agradu's evaluation of strain rate, even in EVM
      lambda=0.0
      udiff=0.0
      utrans=0.

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'CMTPART'

      integer e,f,eg

      e = gllel(eg)

      if (two_way .eq.1) then
c        ffx =  ptw(ix,iy,iz,e,1)/vtrans(ix,iy,iz,e,1) !Nek5000
c        ffy =  ptw(ix,iy,iz,e,2)/vtrans(ix,iy,iz,e,1)
c        ffz =  ptw(ix,iy,iz,e,3)/vtrans(ix,iy,iz,e,1)
         ffx =  ptw(ix,iy,iz,e,1) ! cmtnek
         ffy =  ptw(ix,iy,iz,e,2)
         ffz =  ptw(ix,iy,iz,e,3)
      else
         ffx = 0.0
         ffy = 0.0
         ffz = 0.0
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg
c     e = gllel(eg)

      qvol   = 0.0
      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,f,eg) ! set up boundary conditions

c     NOTE: This routine may or may not be called by every processor

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e,f,eg

!     e = gllel(eg)
c     molarmass=molmass

      ux = 0.
      uy = 0.
      uz = 0.
      temp = 273.

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'PERFECTGAS'
      include 'CMTDATA'
      integer e,eg

      temp = 352.96!sin(pi*x)
      ux   = 0.0
      uy   = 0.0
      uz   = 0.0
      phi  = 1.0
      varsic(1) = MixtPerf_D_PRT(101300.,rgasref,temp)*phi
      varsic(2) = varsic(1)*ux
      varsic(3) = varsic(1)*uy
      varsic(4) = varsic(1)*uz
      varsic(5) = cvgref*temp*varsic(1)+
     >            0.5*(varsic(2)**2+varsic(3)**2+varsic(4)**2)/varsic(1)
      rho  = varsic(1)/phi
      cp=cpgref
      cv=cvgref

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk()
      include 'SIZE'
      include 'TOTAL'
      include 'CTIMER'
      include 'CMTTIMERS'
      real msum_tot(3)

      msum_tot(1) = glsc3(bm1,vtrans,vx,nx1*ny1*nz1*nelv)
      msum_tot(2) = glsc3(bm1,vtrans,vy,nx1*ny1*nz1*nelv)
      msum_tot(3) = glsc3(bm1,vtrans,vz,nx1*ny1*nz1*nelv)
      if (nid.eq.0) write(6,500) "--- Eulerian Properties ------"
      if (nid.eq.0) write(6,500) "Fluid Momentum :              ", 
     >                  msum_tot(1),msum_tot(2),msum_tot(3)


      ifxyo=.true.
      if(istep.gt.1)ifxyo=.false.
  500 FORMAT(A30,9ES20.10)
      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices
      include 'SIZE'
      include 'TOTAL'
      include 'CMTDATA'
      include 'CMTTIMERS'
      include 'CMTBCDATA'
      include 'PERFECTGAS'
      integer e

      molmass    = 29. 
      muref      = 0.0
      coeflambda = -2.0/3.0
      suthcoef   = 1.0
      reftemp    = 1.0
      prlam      = 0.72
      pinfty     = 103000.0
      gmaref     = 1.4
      rgasref    = MixtPerf_R_M(molmass,dum)
      cvgref     = rgasref/(gmaref-1.0)
      cpgref     = MixtPerf_Cp_CvR(cvgref,rgasref)
      gmaref     = MixtPerf_G_CpR(cpgref,rgasref) 

      res_freq = 10000000
      flio_freq = 200

      NCUT =  int(lx1/2)
      NCUTD = lxd
      wght  = 0.2
      wghtd = 0.2

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates
      include 'SIZE'
      include 'TOTAL'
      include 'CMTDATA'
      include 'CMTBCDATA'
      include 'PERFECTGAS'   


      outflsub=.false.
      IFCNTFILT=.false.
      ifrestart=.false.
      ifsip=.false.
      gasmodel = 1

c     a = 0.
c     b = 2*pi
c     call rescale_x(xm1,a,b) ! Put box on [0,2pi]^3
c     call rescale_x(ym1,a,b)
c     call rescale_x(zm1,a,b)

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()
      include 'SIZE'
      include 'TOTAL'

      return
      end
!-----------------------------------------------------------------------
      subroutine cmt_usrflt(rmult)
      include 'SIZE'
      real rmult(lx1)

      real alpfilt, eta, etac
      integer sfilt, kut

      call rone(rmult,lx1)
      alpfilt=36.0 ! H&W 5.3
      kut=lx1/2
      sfilt=8
      etac=real(kut)/real(nx1)
      do i=kut,nx1
         eta=real(i)/real(nx1)
         rmult(i)=exp(-alpfilt*((eta-etac)/(1.0-etac))**sfilt)
      enddo
      return
      end
c-----------------------------------------------------------------------

      subroutine compute_entropy(s)
! computes entropy at istep and pushes the stack down for previous
! steps needed to compute ds/dt via finite difference (for now).
! hardcoded for Burgers equation. More later when folded into CMT-nek
! for Burgers, s=energy=1/2 U^2
      include 'SIZE'
      include 'TOTAL'  ! tlag is lurking. be careful
      include 'CMTDATA'
! I've always seen lorder=3, but I still need three steps
!          s(:,               1,       1)  ! entropy at current step
!          s(:,               2,       1)  ! entropy at step n-1
!          s(:,               1,       2)  ! entropy at step n-2
      real s(lx1*ly1*lz1*lelt,lorder-1,*)
      real ntol
      integer e
      data icalld /0/
      save icalld

      n=nx1*ny1*nz1
      ntot=n*nelt
      ntol=1.0e-10

      if (icalld .eq. 0) then
         icalld=1
         call rzero(s,ntot)
         call rzero(s(1,1,2),ntot)
         call rzero(s(1,2,1),ntot)
      endif
! push the stack
      call copy(s(1,1,2),s(1,2,1),ntot) ! s_{n-2}=s_{n-1}
      call copy(s(1,2,1),s(1,1,1),ntot) ! s_{n-1}=s_n

! compute the current entropy
      rgam=1.0/(gmaref-1.0)
      do i=1,ntot
         rho=max(vtrans(i,1,1,1,irho),ntol)
         s(i,1,1)=rgam*rho*log(pr(i,1,1,1)/(rho**gmaref))
      enddo

      return
      end

!-----------------------------------------------------------------------

      subroutine entropy_viscosity
      include 'SIZE'
      include 'TOTAL'
      include 'CMTDATA'
      parameter (lxyz=lx1*ly1*lz1)
      common /scrns/ scrent(lxyz,lelt)
      real visco(lxyz,nelt)
      integer e

      pi=4.0*atan(1.0)

      goto 999
      n=nx1*ny1*nz1
      ntot=n*nelt
! entropy at this and lorder prior steps
      call compute_entropy(tlag)
! compute maxval(|S-<S>|)
      savg    =    glsc2(tlag,bm1,ntot)
      savg    = -savg/volvm1
      call cadd2(scrent,tlag,savg,ntot)
      maxdiff =     glamax(scrent,ntot)
      call entropy_residual(tlag) ! into res2
      call wavevisc(t(1,1,1,1,3))
      call resvisc(res2) ! fill maxres for now
!     write(6,*) 'max |s-<s>|=',maxdiff
999   continue
      return
      end

c-----------------------------------------------------------------------

      subroutine entropy_residual(s)
! COMPUTE R=ds/dt + div F(s) for entropy pair s and (hardcoded) F
! and store its norm functional thing |R| in res2 where it will
! provide artificial viscosity according to the code in
! entropy_viscosity and the method of Guermond
      include 'SIZE'
      include 'TOTAL' ! tlag lurks
      include 'CMTDATA'
      common /ctmp0/ restmp(lx1*ly1*lz1*lelt)
      real restmp
      real s(lx1*ly1*lz1*lelt,lorder-1,ldimt)
      integer e

      n=nx1*ny1*nz1
      ntot=n*nelt

! I set istep=kstep. why do I need to do this again?
      if (istep .eq. 1) return
! ds/dt via 1-sided finite difference. CHANGE THIS WHEN WE FINALLY
! HAVE VARIABLE DT
      r2dt=0.5/DT
      if (istep .eq. 2) then ! don't do this learn how to start multistep!!!
         rdt=2.0*r2dt
         call sub3(res2,s(1,1,1),s(1,2,1),ntot)
         call cmult(res2,rdt,ntot)
      elseif (istep .gt. 2) then
         call add3s2(res2,s(1,1,1),s(1,1,2),3.0,1.0,ntot)
         call add2s2(res2,s(1,2,1),-4.0,ntot)
         call cmult(res2,r2dt,ntot)
      endif
      call copy(t(1,1,1,1,2),res2,ntot) ! Bala suggested just using this
! res2=ds/dt. now,

!-----------------------------------------------------------------------
! cons approach: strong-conservation form of flux divergence in entropy residual
!-----------------------------------------------------------------------
! get around to expanding totalh to store fluxes for whole fields and
! properly vectorize evaluate_*_h and flux_div_integral
      do e=1,nelt
!! diagnostic
!         if (mod(istep,iostep).eq.0) then ! compare ds/dt to resid
!            do i=1,n
!               write(nid*1000+istep,*) xm1(i,1,1,e),ym1(i,1,1,e),
!     >                            res2(i,1,1,e,1)
!            enddo
!         endif
!! diagnostic
         call evaluate_entropy_flux(e) ! diffh. zero it before diffusion 
         call flux_div_mini(e) ! into res2 it goes.
      enddo
      maxres=glamax(res2,ntot)
! actually...
!-----------------------------------------------------------------------
! conv1 approach: convective form of flux divergence in entropy residual
!-----------------------------------------------------------------------
! Guermond Pasquetti & Popov (2011) (2.26) suggest a pointwise convective
! form for the entropy residual. see cburg.usr for further exploration

      return
      end

c-----------------------------------------------------------------------

      subroutine evaluate_entropy_flux(e)
! entropy flux function for entropy residual.
! just vel*s for now
      include 'SIZE'
      include 'SOLN'
      include 'INPUT'
      include 'CMTDATA'
      integer e

      call rzero(totalh,3*nxd*nyd*nzd)
      n=nx1*ny1*nz1

      call col3(totalh(1,1),vx(1,1,1,e),tlag(1,1,1,e,1,1),n)
      call col3(totalh(1,2),vy(1,1,1,e),tlag(1,1,1,e,1,1),n)
      if (if3d) call col3(totalh(1,3),vz(1,1,1,e),tlag(1,1,1,e,1,1),n)

      return
      end

c-----------------------------------------------------------------------

      subroutine flux_div_mini(e)
      include 'SIZE'
      include 'INPUT'
      include 'GEOM'
      include 'DXYZ'
      include 'SOLN'
      include 'CMTDATA'
      parameter (ldd=lx1*ly1*lz1)
      parameter (ldg=lx1**3,lwkd=2*ldg)
      common /ctmp1/ ur(ldd),us(ldd),ut(ldd),ju(ldd),ud(ldd),tu(ldd)
      real ju

      integer e

      nrstd=ldd
      nxyz=nx1*ny1*nz1
      mdm1=nx1-1

      call rzero(ur,nrstd)
      call rzero(us,nrstd)
      call rzero(ut,nrstd)
      call rzero(ud,nrstd)
      call rzero(tu,nrstd)

      if (if3d) then
         call local_grad3(ur,us,ut,totalh(1,1),mdm1,1,dxm1,dxtm1)
         do i=1,nxyz
            ud(i) = jacmi(i,e)*(rxm1(i,1,1,e)*ur(i)
     $                        + sxm1(i,1,1,e)*us(i)
     $                        + txm1(i,1,1,e)*ut(i))
         enddo
         call local_grad3(ur,us,ut,totalh(1,2),mdm1,1,dxm1,dxtm1)
         do i=1,nxyz ! confirmed to have no effect in 1D
            ud(i)=ud(i)+jacmi(i,e)*(rym1(i,1,1,e)*ur(i)
     $                            + sym1(i,1,1,e)*us(i)
     $                            + tym1(i,1,1,e)*ut(i))
         enddo
         call local_grad3(ur,us,ut,totalh(1,3),mdm1,1,dxm1,dxtm1)
         do i=1,nxyz ! confirmed to have no effect in 1D
            ud(i)=ud(i)+jacmi(i,e)*(rzm1(i,1,1,e)*ur(i)
     $                            + szm1(i,1,1,e)*us(i)
     $                            + tzm1(i,1,1,e)*ut(i))
         enddo
      else
         call local_grad2(ur,us,totalh(1,1),mdm1,1,dxm1,dxtm1)
         do i=1,nxyz
            ud(i) = jacmi(i,e)*(rxm1(i,1,1,e)*ur(i)
     $                        + sxm1(i,1,1,e)*us(i))
         enddo
         call local_grad2(ur,us,totalh(1,2),mdm1,1,dxm1,dxtm1)
         do i=1,nxyz
            ud(i)=ud(i)+jacmi(i,e)*(rym1(i,1,1,e)*ur(i)
     $                            + sym1(i,1,1,e)*us(i))
         enddo
      endif
      call add2(res2(1,1,1,e,1),ud,nxyz)

      return
      end

!-----------------------------------------------------------------------

      subroutine resvisc(residual)
! max entropy visc, defined by Guermond, Popov, whoever (chapter-verse)
! as 
! in a given element
      include 'SIZE'
      include 'TOTAL'
      include 'CMTDATA'
      include 'DG'
      integer lfq,heresize,hdsize
      parameter (lfq=lx1*lz1*2*ldim*lelt,
     >                   heresize=nqq*3*lfq,
     >                   hdsize=toteq*3*lfq) ! might not need ldim
      common /CMTSURFLX/ flux(heresize),graduf(hdsize)
      real flux,graduf
      parameter (lxyz=lx1*ly1*lz1)
      real residual(lxyz,nelt)
      integer e,f
      real maxjump

      nxyz =nx1*ny1*nz1
      nxz  =nx1*nz1
      nface=2*ndim
      nxzf =nxz*nface
      nfq  =nxzf*nelt

      iqm=1
      iqp=iqm+4*nfq

      call fillq(1,tlag,flux(iqm),flux(iqp))
      call fillq(2,vx,flux(iqm),flux(iqp))
      call fillq(3,vy,flux(iqm),flux(iqp))
      call fillq(4,vz,flux(iqm),flux(iqp))

      call jumpflux(flux(iqm),flux(iqp))

      l=1
      do e=1,nelt
         maxres(e)=vlamax(residual(1,e),nxyz)
         maxjump=vlamax(flux(l),nxzf)/meshh(e) ! |s u.n|/h
         l=l+nxzf
!        if (maxjump .gt. maxres(e)) maxres(e)=maxjump
      enddo

      return
      end

      subroutine jumpflux(qminus,jump)
      include 'SIZE'
      include 'GEOM'
      include 'DG'
      include 'INPUT'
      include 'CMTDATA'
      real qminus(nx1*nz1,2*ndim,nelt,4),
     >       jump(nx1*nz1,2*ndim,nelt)
      integer e,f
      character*3 cb

      nxz =nx1*nz1
      nface=2*ndim
      nxzf=nface*nxz
      nfq=nxzf*nelt

! form s u.n !!!!RFFFFFFFUUUUUUUUUUU unx is fixed at 6
!     call col3   (jump,unx,qminus(1,1,1,iux),nfq)
!     call addcol3(jump,uny,qminus(1,1,1,iuy),nfq)
!     if (if3d) call addcol3(jump,unz,qminus(1,1,1,iuz),nfq)
!     call col2(jump,qminus,nfq) ! 1 assumed to be entropy

! BC check. DO NOTHING FOR NOW
      ifield=1 ! FIX THIS

      do e=1,nelt
         do f=1,2*ndim
            cb=cbc(f,e,ifield)
            if (cb.ne.'E  '.and.cb.ne.'P  ') then
               call rzero(jump(1,f,e),nxz)
            else
               call col3   (jump(1,f,e),unx(1,1,f,e),qminus(1,f,e,iux),
     >                      nxz)
               call addcol3(jump(1,f,e),uny(1,1,f,e),qminus(1,f,e,iuy),
     >                      nxz)
               if (if3d)
     >         call addcol3(jump(1,f,e),unz(1,1,f,e),qminus(1,f,e,iuz),
     >                      nxz)
               call col2(jump(1,f,e),qminus(1,f,e,1),nxz) ! 1 assumed to be entropy
            endif
         enddo
      enddo

      call gs_op(dg_hndl,jump,1,1,0)

      return
      end

!-----------------------------------------------------------------------

      subroutine wavevisc(numax)
! max entropy visc, defined by Guermond, Popov, whoever (chapter-verse)
! as 
! numax = c_max*h*max(dH/dU)
! in a given element
      include 'SIZE'
      include 'TOTAL'
      include 'CMTDATA'
      parameter (lxyz=lx1*ly1*lz1)
      common /scrns/ wavespeed(lxyz)
      real wavespeed
      real maxeig
      real numax(lxyz,nelt)
      integer e

      nxyz=nx1*ny1*nz1

      do e=1,nelt
         do i=1,nxyz
            wavespeed(i)=csound(i,1,1,e)+
     >      sqrt(vx(i,1,1,e)**2+vy(i,1,1,e)**2+vz(i,1,1,e)**2)
         enddo
         maxeig=vlamax(wavespeed,nxyz)
         rhomax(e)=vlamax(vtrans(1,1,1,e,irho),nxyz)
         do i=1,nxyz
!           smax(i,e)=c_max*maxeig*gridh(i,e)
!           smax(i,e)=c_max*maxeig*meshh(e)*rhomax(e)
            numax(i,e)=c_max*maxeig*meshh(e)
         enddo
      enddo

      return
      end
