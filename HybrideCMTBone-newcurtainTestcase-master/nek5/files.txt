./examples/3dboxHybrid.rhe/SIZE.cuf:      parameter (maxmor = lelt)
./examples/3dboxHybrid.rhe/box.f:      real   xerange(2,3,lelt)
./examples/3dboxHybrid.rhe/box.f:      real   xerange(2,3,lelt)
./examples/3dboxHybrid.rhe/box.f:      real   xerange(2,3,lelt)
./examples/3dboxHybrid.rhe/box.usr:      real   xerange(2,3,lelt)
./examples/3dboxHybrid.rhe/box.usr:      real   xerange(2,3,lelt)
./examples/3dboxHybrid.rhe/box.usr:      real   xerange(2,3,lelt)
./examples/3dboxHybrid.rhe/log.txt: nelgt/nelgv/lelt:         512         512         512
./examples/3dboxHybrid.rhe/log.txt: ------nelt:           52 lelt:         8192
./examples/3dboxHybrid.rhe/log.txt: ------nelt:           52 lelt:         8192
./examples/3dboxHybrid.rhe/log.txt: ------nelt:           52 lelt:         8192
./examples/3dboxHybrid.rhe/log.txt: ------nelt:           52 lelt:         8192
./examples/3dboxHybrid.rhe/log.txt: ------nelt:           52 lelt:         8192
./examples/3dboxHybrid.rhe/log.txt: ------nelt:           52 lelt:         8192
./examples/3dboxHybrid.rhe/log.txt: ------nelt:           52 lelt:         8192
./examples/3dboxHybrid.rhe/log.txt: ------nelt:           52 lelt:         8192
./examples/3dboxHybrid.rhe/log.txt: ------nelt:           52 lelt:         8192
./examples/3dboxHybrid.rhe/log.txt: ------nelt:           52 lelt:         8192
Binary file ./examples/3dboxHybrid.rhe/nek5000 matches
./examples/3dboxHybrid.rhe/output.txt: nelgt/nelgv/lelt:        8000        8000        4000
./examples/3dboxHybrid.rhe/output.txt.equal: nelgt/nelgv/lelt:        8000        8000        4000
./examples/3dboxHybrid.rhe/output.txt.orig: nelgt/nelgv/lelt:         512         512         512
./examples/3dboxHybrid.rhe/output.txt.orig: ------nelt:          460 lelt:         8192
./examples/3dboxHybrid.rhe/output.txt.orig: ------nelt:          460 lelt:         8192
./examples/3dboxHybrid.rhe/output.txt.orig: ------nelt:          460 lelt:         8192
./examples/3dboxHybrid.rhe/output.txt.orig: ------nelt:          460 lelt:         8192
./examples/3dboxHybrid.rhe/output.txt.orig: ------nelt:          460 lelt:         8192
./examples/3dboxHybrid.rhe/output.txt.orig: ------nelt:          460 lelt:         8192
./examples/3dboxHybrid.rhe/output.txt.orig: ------nelt:          460 lelt:         8192
./examples/3dboxHybrid.rhe/output.txt.orig: ------nelt:          460 lelt:         8192
./examples/3dboxHybrid.rhe/output.txt.orig: ------nelt:          460 lelt:         8192
./examples/3dboxHybrid.rhe/output.txt.orig: ------nelt:          460 lelt:         8192
./examples/3dboxHybrid/SIZE:      parameter (lx1=7,ly1=lx1,lz1=lx1,lelt=8192,lelv=lelt)
./examples/3dboxHybrid/SIZE:c     parameter (lpelv=lelv,lpelt=lelt,lpert=3)  ! perturbation
./examples/3dboxHybrid/SIZE:c     parameter (lbelv=lelv,lbelt=lelt)          ! MHD
./examples/3dboxHybrid/SIZE:      parameter (maxmor = lelt)
./examples/3dboxHybrid/SIZE.cuf:      parameter (lx1=7,ly1=lx1,lz1=lx1,lelt=8192,lelv=lelt)
./examples/3dboxHybrid/SIZE.cuf:      parameter (maxmor = lelt)
./examples/3dboxHybrid/box.f:      real   xerange(2,3,lelt)
./examples/3dboxHybrid/box.f:      real   xerange(2,3,lelt)
./examples/3dboxHybrid/box.f:      real   xerange(2,3,lelt)
./examples/3dboxHybrid/box.usr:      real   xerange(2,3,lelt)
./examples/3dboxHybrid/box.usr:      real   xerange(2,3,lelt)
./examples/3dboxHybrid/box.usr:      real   xerange(2,3,lelt)
./examples/3dboxHybrid/log.txt: nelgt/nelgv/lelt:         512         512         512
./examples/3dboxHybrid/log.txt: ------nelt:           52 lelt:         8192
./examples/3dboxHybrid/log.txt: ------nelt:           52 lelt:         8192
./examples/3dboxHybrid/log.txt: ------nelt:           52 lelt:         8192
./examples/3dboxHybrid/log.txt: ------nelt:           52 lelt:         8192
./examples/3dboxHybrid/log.txt: ------nelt:           52 lelt:         8192
./examples/3dboxHybrid/log.txt: ------nelt:           52 lelt:         8192
./examples/3dboxHybrid/log.txt: ------nelt:           52 lelt:         8192
./examples/3dboxHybrid/log.txt: ------nelt:           52 lelt:         8192
./examples/3dboxHybrid/log.txt: ------nelt:           52 lelt:         8192
./examples/3dboxHybrid/log.txt: ------nelt:           52 lelt:         8192
Binary file ./examples/3dboxHybrid/nek5000 matches
./examples/3dboxHybrid/output.txt: nelgt/nelgv/lelt:        8000        8000        4000
./examples/3dboxHybrid/output.txt.equal: nelgt/nelgv/lelt:        8000        8000        4000
./examples/3dboxHybrid/output.txt.orig: nelgt/nelgv/lelt:         512         512         512
./examples/3dboxHybrid/output.txt.orig: ------nelt:          460 lelt:         8192
./examples/3dboxHybrid/output.txt.orig: ------nelt:          460 lelt:         8192
./examples/3dboxHybrid/output.txt.orig: ------nelt:          460 lelt:         8192
./examples/3dboxHybrid/output.txt.orig: ------nelt:          460 lelt:         8192
./examples/3dboxHybrid/output.txt.orig: ------nelt:          460 lelt:         8192
./examples/3dboxHybrid/output.txt.orig: ------nelt:          460 lelt:         8192
./examples/3dboxHybrid/output.txt.orig: ------nelt:          460 lelt:         8192
./examples/3dboxHybrid/output.txt.orig: ------nelt:          460 lelt:         8192
./examples/3dboxHybrid/output.txt.orig: ------nelt:          460 lelt:         8192
./examples/3dboxHybrid/output.txt.orig: ------nelt:          460 lelt:         8192
./tests/RunTests:    sed -i "s:(lx1=4,ly1=lx1,lz1=lx1,lelt=1500,lelv=lelt):(lx1=4,ly1=lx1,lz1=lx1,lelt=6000,lelv=lelt):" examples/moab/SIZE
./tests/RunTests:sed -i "s:(lx1=10,ly1=lx1,lz1=1,lelt=80,lelv=lelt):(lx1=8,ly1=lx1,lz1=1,lelt=80,lelv=lelt):" examples/vortex2/SIZE

./trunk/nek/3rd_party/MOABCORE:c      pointer (rpxm1, xm1l(lx1, ly1, lz1, lelt))
./trunk/nek/3rd_party/MOABCORE:c      pointer (rpym1, ym1l(lx1, ly1, lz1, lelt))
./trunk/nek/3rd_party/MOABCORE:c      pointer (rpzm1, zm1l(lx1, ly1, lz1, lelt))
./trunk/nek/3rd_party/MOABCORE:c      pointer (rpvx, vxl(lx1, ly1, lz1, lelt))
./trunk/nek/3rd_party/MOABCORE:c      pointer (rpvy, vyl(lx1, ly1, lz1, lelt))
./trunk/nek/3rd_party/MOABCORE:c      pointer (rpvz, vzl(lx1, ly1, lz1, lelt))
./trunk/nek/3rd_party/MOABCORE:c      pointer (rpt, tl(lx1, ly1, lz1, lelt, *))
./trunk/nek/3rd_party/MOABCORE:c      pointer (rpp, prl(lx2, ly2, lz2, lelt))
./trunk/nek/3rd_party/moab.f:      common /ctmp0/ iwork(lelt)
./trunk/nek/3rd_party/moab.f:      common /ctmp0/ iwork(lelt)
./trunk/nek/3rd_party/moab.f:      npass = 1 + nelgt/lelt
./trunk/nek/3rd_party/moab.f:         m = min(m,lelt)
./trunk/nek/3rd_party/moab.f:      common /mbc/ moabbc(6,lelt,ldimt1) 
./trunk/nek/3rd_party/moab.f:      call ifill(moabbc, -1, 6*lelt*ldimt1)
./trunk/nek/3rd_party/moab.f:      integer bcdata(6,lelt,ldimt1), field
./trunk/nek/3rd_party/moab.f:      common /mbc/ moabbc(6,lelt,ldimt1)
./trunk/nek/3rd_party/moab.f:      lcbc=18*lelt*(ldimt1 + 1)
./trunk/nek/3rd_party/moab.f:      common /tcrmg/ x27(27,lelt), y27(27,lelt), z27(27,lelt)
./trunk/nek/3rd_party/moab.f:      common /moabvp/  density (lx1,ly1,lz1,lelt)             ! fuel density for MOAB
./trunk/nek/3rd_party/moab.f:      real field(lx1,ly1,lz1,lelt)
./trunk/nek/3rd_party/moab.f:      real field(lx1,ly1,lz1,lelt)
./trunk/nek/3rd_party/moab.f:      real vals(lx1*ly1*lz1*lelt), tag_vals
./trunk/nek/AVG:      common /chkavg/  uavg(ax1,ay1,az1,lelt)
./trunk/nek/AVG:     $               , vavg(ax1,ay1,az1,lelt)
./trunk/nek/AVG:     $               , wavg(ax1,ay1,az1,lelt)
./trunk/nek/AVG:     $               , tavg(ax1,ay1,az1,lelt,ldimt)
./trunk/nek/AVG:     $               , pavg(ax2,ay2,az2,lelt)
./trunk/nek/AVG:      common /chkrms/  urms(ax1,ay1,az1,lelt)
./trunk/nek/AVG:     $               , vrms(ax1,ay1,az1,lelt)
./trunk/nek/AVG:     $               , wrms(ax1,ay1,az1,lelt)
./trunk/nek/AVG:     $               , trms(ax1,ay1,az1,lelt,ldimt)
./trunk/nek/AVG:     $               , prms(ax2,ay2,az2,lelt)
./trunk/nek/AVG:     $               , vwms(ax1,ay1,az1,lelt)
./trunk/nek/AVG:     $               , wums(ax1,ay1,az1,lelt)
./trunk/nek/AVG:     $               , uvms(ax1,ay1,az1,lelt)
./trunk/nek/DOMAIN:      parameter (ltotd = lx1*ly1*lz1*lelt                     )
./trunk/nek/DOMAIN:     $              , na (lelt+1) , ma(lelt+1)
./trunk/nek/DOMAIN:     $              , nza(lelt+1)
./trunk/nek/DOMAIN:      common /h1_crsi/ se_to_gcrs(lcr,lelt)
./trunk/nek/FDMH1:     $              , elsize(3,lelt)
./trunk/nek/FDMH1:     $              , bhalf(lx1,ly1,lz1,lelt)
./trunk/nek/FDMH1:      common /fdmh1i/ kfldfdm,ktype(lelt,3,0:4)
./trunk/nek/GEOM:     $             ,jacmi (lx1*ly1*lz1,lelt)
./trunk/nek/GEOM:      COMMON /GSURF/unr   (lx1*lz1,6,lelt)
./trunk/nek/GEOM:     $             ,uns   (lx1*lz1,6,lelt)
./trunk/nek/GEOM:     $             ,unt   (lx1*lz1,6,lelt)
./trunk/nek/GEOM:     $             ,etalph(lx1*lz1,2*ldim,lelt)
./trunk/nek/HSMG:     $            , mg_rstr_wt   (0:lmgs*lmg_rwt*2*ldim*lelt-1) !restriction wt
./trunk/nek/HSMG:     $            , mg_mask      (0:lmgs*lmg_rwt*4*ldim*lelt-1)   !b.c. mask
./trunk/nek/HSMG:     $            , mg_fast_s    (0:lmgs*lmg_fasts*2*ldim*lelt-1)
./trunk/nek/HSMG:     $            , mg_fast_d    (0:lmgs*lmg_fastd*lelt-1)
./trunk/nek/HSMG:     $            , mg_schwarz_wt(0:lmgs*lmg_swt*4*ldim*lelt-1)
./trunk/nek/HSMG:     $            , mg_solve_e   (0:lmg_solve*lelt-1)
./trunk/nek/HSMG:     $            , mg_solve_r   (0:lmg_solve*lelt-1)
./trunk/nek/HSMG:     $            , mg_h1        (0:lmg_g*lelt-1)
./trunk/nek/HSMG:     $            , mg_h2        (0:lmg_g*lelt-1)
./trunk/nek/HSMG:     $            , mg_b         (0:lmg_g*lelt-1)
./trunk/nek/HSMG:     $            , mg_g         (0:lmg_g*((ldim-1)*3)*lelt-1) !metrics matrices
./trunk/nek/HSMG:     $            , mg_work      (2*lxm*lym*lzm*lelt) ! must be able to hold 
./trunk/nek/HSMG:     $            , mg_work2     (lxm*lym*lzm*lelt)   ! two lower level extended
./trunk/nek/HSMG:      integer mg_imask(0:lmgs*lmg_rwt*4*ldim*lelt-1) ! For h1mg, mask is a ptr
./trunk/nek/NEKNEK:      common /intflag/ intflag(6,lelt)
./trunk/nek/NEKNEK:      common /intmask/ imask(lx1,ly1,lz1,lelt) 
./trunk/nek/NEKNEK:      common /valmask/ valint(lx1,ly1,lz1,lelt,nfldmax)
./trunk/nek/NEKNEK:      common /mybc/ ubc(lx1,ly1,lz1,lelt,nfldmax)
./trunk/nek/NEKNEK:      common /mybd/ bdrylg(lx1*ly1*lz1*lelt,nfldmax,0:2)
./trunk/nek/NONCON:     $      umult(lx1*ly1*lz1*lelt)
./trunk/nek/NONCON:     $   ,  mortar(6,lelt)
./trunk/nek/ORTHOP:      parameter (ktot = lx1*ly1*lz1*lelt)
./trunk/nek/ORTHOSTRS:      parameter (ktot = lx1m*ly1m*lz1m*lelt)
./trunk/nek/ORTHOT:      parameter (ktot = lx1*ly1*lz1*lelt)
./trunk/nek/ORTHOV:      parameter (ktot = lx1*ly1*lz1*lelt)
./trunk/nek/PARALLEL:      common /xcdg_arrays/ dg_face(lx1*lz1*2*ldim*lelt)
./trunk/nek/RESTART:c     parameter (lelr=max(lelt,lelg/16)) ! THIS IS THE MEMORY conservative VERSION
./trunk/nek/ZPER:c     parameter (ltfdm2=2*lx2*ly2*lz2*lelt)
./trunk/nek/ZPER:      parameter (ltfdm2 =lfdm0+lfdm*2*lx2*ly2*lz2*lelt)
./trunk/nek/bdry.f:      common /scrmg/ v1(lx1,ly1,lz1,lelt)
./trunk/nek/bdry.f:     $             , v2(lx1,ly1,lz1,lelt)
./trunk/nek/bdry.f:     $             , v3(lx1,ly1,lz1,lelt)
./trunk/nek/cmthybrid/GEOM.cuf:             ,JACM1 (LX1,LY1,LZ1,LELT) ,jacmi (lx1*ly1*lz1,lelt)
./trunk/nek/cmthybrid/GEOM.cuf:      COMMON /GSURF/unr   (lx1*lz1,6,lelt) ,uns   (lx1*lz1,6,lelt) ,unt   &
./trunk/nek/cmthybrid/GEOM.cuf:              (lx1*lz1,6,lelt) ,UNX   (LX1,LZ1,6,LELT) ,UNY   (LX1,LZ1,6, &
./trunk/nek/cmthybrid/GEOM.cuf:              (LX1,LZ1,6,LELT) ,etalph(lx1*lz1,2*ldim,lelt) ,DLAM
./trunk/nek/cmthybrid/PARALLEL.cuf:      common /xcdg_arrays/ dg_face(lx1*lz1*2*ldim*lelt)
./trunk/nek/cmthybrid/cuda_fortran.cuf:      real vol(lx1*ly1*lz1*lelt,toteq),flux(lelt*lx1*lz1*2*ldim*toteq)
./trunk/nek/cmthybrid/cuda_fortran.cuf:      !real vol(lx1*ly1*lz1*lelt,toteq),flux(lx1*lz1*2*ldim*toteq)
./trunk/nek/cmthybrid/cuda_fortran.cuf:      real, device :: d_vol(lx1*ly1*lz1*lelt,toteq)
./trunk/nek/cmthybrid/cuda_fortran.cuf:      real, device :: d_flux(lelt*lx1*lz1*2*ldim*toteq)
./trunk/nek/cmthybrid/cuda_fortran.cuf:      real, device :: d_area(lelt*6*lx1*lz1)
./trunk/nek/cmthybrid/cuda_fortran.cuf:      real, device :: d_phig(lx1*ly1*lz1*lelt)
./trunk/nek/cmthybrid/cuda_fortran.cuf:      real, device :: d_iface_flux(lelt*6*lx1*nz1)
./trunk/nek/cmthybrid/cuda_fortran.cuf:      istate = cudaMemcpy(d_flux,flux,lelt*lx1*lz1*2*ldim*toteq,cudaMemcpyHosttoDevice)
./trunk/nek/cmthybrid/cuda_fortran.cuf:      istate = cudaMemcpy(d_area,area,lelt*nface*lx1*lz1,cudaMemcpyHosttoDevice)
./trunk/nek/cmthybrid/cuda_fortran.cuf:      istate = cudaMemcpy(d_phig,phig,lx1*ly1*lz1*lelt, cudaMemcpyHosttoDevice)
./trunk/nek/cmthybrid/cuda_fortran.cuf:      istate = cudaMemcpy(d_iface_flux,iface_flux,lelt*nface*lx1*lz1,cudaMemcpyHosttoDevice)
./trunk/nek/cmthybrid/cuda_fortran.cuf:      real, device :: d_vols(lx1,ly1,lz1,lelt,5)
./trunk/nek/cmthybrid/cuda_fortran.cuf:      real, device :: d_iface_flux(lx1*lz1*6,lelt)
./trunk/nek/cmthybrid/cuda_fortran.cuf:      real, device :: d_u(lx1,ly1,lz1,toteq,lelt)
./trunk/nek/cmthybrid/cuda_fortran.cuf:      real, device :: d_unx(lx1,lz1,6,lelt)
./trunk/nek/cmthybrid/cuda_fortran.cuf:      real, device :: d_uny(lx1,lz1,6,lelt)
./trunk/nek/cmthybrid/cuda_fortran.cuf:      real, device :: d_unz(lx1,lz1,6,lelt)
./trunk/nek/cmthybrid/cuda_fortran.cuf:      real, device :: d_all(lelt*6*lxd*lzd,26)
./trunk/nek/cmthybrid/cuda_fortran.cuf:      real, device :: d_jaco_c(lelt*6*lx1*lz1)
./trunk/nek/cmthybrid/cuda_fortran.cuf:      real, device :: d_area(lx1,lz1,6,lelt)
./trunk/nek/cmthybrid/diff.txt:<       integer num_sh, num_cores, shArray(2, lelt*6)
./trunk/nek/cmthybrid/diff.txt:>       common /shareddata/ num_sh, shArray(2, lelt*6)
./trunk/nek/cmthybrid/diff.txt:>       if (lelcmt.ne.lelt) then
./trunk/nek/cmthybrid/diff.txt:>          if (nio.eq.0) write(6,*)'ERROR! lelcmt is not same as lelt '
./trunk/nek/cmthybrid/diff.txt:>          if (nio.eq.0) write(6,*) 'lelcmt=',lelcmt,' lelt=',lelt
./trunk/nek/cmthybrid/diff.txt:<       real   xerange(2,3,lelt)
./trunk/nek/cmthybrid/diff.txt:> !      real   xerange(2,3,lelt)
./trunk/nek/cmthybrid/diff.txt:<       integer num_sh, num_cores, shArray(2, lelt*6)
./trunk/nek/cmthybrid/diff.txt:>       common /shareddata/ num_sh, shArray(2, lelt*6)
./trunk/nek/cmthybrid/diff.txt:<       integer num_sh, num_cores, shArray(2, lelt*6)
./trunk/nek/cmthybrid/level1.cuf:      real   xerange(2,3,lelt)
./trunk/nek/cmthybrid/level1.cuf:      real, device :: d_xerange(2,3,lelt)
./trunk/nek/cmthybrid/level1.cuf:      common /shareddata/ num_sh, shArray(2, lelt*6)
./trunk/nek/cmthybrid/level1.cuf:      !print *,'------nelt:',nelt,'lelt:',lelt
./trunk/nek/cmthybrid/level1.cuf:      if (lelcmt.ne.lelt) then
./trunk/nek/cmthybrid/level1.cuf:         if (nio.eq.0) write(6,*)'ERROR! lelcmt is not same as lelt '
./trunk/nek/cmthybrid/level1.cuf:         if (nio.eq.0) write(6,*) 'lelcmt=',lelcmt,' lelt=',lelt
./trunk/nek/cmthybrid/level1.cuf:      print *, "came here", nelt, lelt, istep
./trunk/nek/cmthybrid/level1.cuf:!      real   xerange(2,3,lelt)
./trunk/nek/cmthybrid/level1.cuf:      common /shareddata/ num_sh, shArray(2, lelt*6)
./trunk/nek/cmthybrid/level1.cuf:      integer num_sh, num_cores, shArray(2, lelt*6)
./trunk/nek/cmthybrid/level1.cuf:      real, device :: d_xerange(2,3,lelt)
./trunk/nek/cmthybrid/level1.cuf:      real   xerange(2,3,lelt)
./trunk/nek/cmthybrid/level1.cuf:      integer num_sh, num_cores, shArray(2, lelt*6)
./trunk/nek/cmthybrid/level1.f:      real, device :: d_res3(lx1,ly1,lz1,toteq,lelt)
./trunk/nek/cmthybrid/level1.f:      real, device :: d_u(lx1,ly1,lz1,toteq,lelt)
./trunk/nek/cmthybrid/level1.f:      real, device :: d_res1(lx1,ly1,lz1,lelt,toteq)
./trunk/nek/cmthybrid/level1.f:      real, device :: d_bm1(lx1,ly1,lz1,lelt)
./trunk/nek/cmthybrid/level1.f:      real, device :: d_w(lelt*lwkd)
./trunk/nek/cmthybrid/level1.f:!      real, device :: d_vx(lx1,ly1,lz1,lelt)
./trunk/nek/cmthybrid/level1.f:!      real, device :: d_vy(lx1,ly1,lz1,lelt)
./trunk/nek/cmthybrid/level1.f:!      real, device :: d_vz(lx1,ly1,lz1,lelt)
./trunk/nek/cmthybrid/level1.f:      real, device :: d_vxd(lxd,lyd,lzd,lelt)
./trunk/nek/cmthybrid/level1.f:      real, device :: d_vyd(lxd,lyd,lzd,lelt)
./trunk/nek/cmthybrid/level1.f:      real, device :: d_vzd(lxd,lyd,lzd,lelt)
./trunk/nek/cmthybrid/level1.f:!      real, device :: d_vtrans(lx1,ly1,lz1,lelt)
./trunk/nek/cmthybrid/level1.f:!      real, device :: d_pr(lx1,ly1,lz1,lelt)  
./trunk/nek/cmthybrid/level1.f:      real, device :: d_area(lx1,lz1,6,lelt)  
./trunk/nek/cmthybrid/level1.f:      real, device :: d_phig(lx1,ly1,lz1,lelt)  
./trunk/nek/cmthybrid/level1.f:      real, device :: d_iface_flux(lx1*lz1*6,lelt)  
./trunk/nek/cmthybrid/level1.f:      real, device :: d_totalh(lelt*3*lxd*lyd*lzd)
./trunk/nek/cmthybrid/level1.f:      real, device :: d_ju1(lelt*lxd*lyd*lzd)     
./trunk/nek/cmthybrid/level1.f:      real, device :: d_ju2(lelt*lxd*lyd*lzd)
./trunk/nek/cmthybrid/level1.f:      real, device :: d_ut(lelt*lxd*lyd*lzd)
./trunk/nek/cmthybrid/level1.f:      real, device :: d_ud(lelt*lxd*lyd*lzd)
./trunk/nek/cmthybrid/level1.f:      real, device :: d_tu(lelt*lxd*lyd*lzd)     
./trunk/nek/cmthybrid/level1.f:      real, device :: d_rx(lxd*lyd*lzd,9,lelt)
./trunk/nek/cmthybrid/level1.f:      real, device :: d_jacmi(lx1*ly1*lz1,lelt)
./trunk/nek/cmthybrid/level1.f:      real, device :: d_vols(lx1,ly1,lz1,lelt,5) 
./trunk/nek/cmthybrid/level1.f:      real, device :: d_unx(lx1,lz1,6,lelt)
./trunk/nek/cmthybrid/level1.f:      real, device :: d_uny(lx1,lz1,6,lelt)
./trunk/nek/cmthybrid/level1.f:      real, device :: d_unz(lx1,lz1,6,lelt)
./trunk/nek/cmthybrid/level1.f:      real, device :: d_all(lelt*6*lxd*lzd,26)
./trunk/nek/cmthybrid/level1.f:      real, device :: d_jaco_c(lelt*6*lx1*lz1);
./trunk/nek/cmthybrid/level1.f:      istate = cudaMemcpy(d_u,u,lelt*toteq*lx1*ly1*lz1,         
./trunk/nek/cmthybrid/level1.f:      istate = cudaMemcpy(d_unx,unx,lelt*6*lx1*lz1,         
./trunk/nek/cmthybrid/level1.f:      istate = cudaMemcpy(d_uny,uny,lelt*6*lx1*lz1,         
./trunk/nek/cmthybrid/level1.f:      istate = cudaMemcpy(d_unz,unz,lelt*6*lx1*lz1,         
./trunk/nek/cmthybrid/level1.f:      istate = cudaMemcpy(d_area,area,lelt*6*lx1*lz1,         
./trunk/nek/cmthybrid/level1.f:      istate = cudaMemcpy(d_phig,phig,lelt*lx1*ly1*lz1,         
./trunk/nek/cmthybrid/level1.f:      istate = cudaMemcpy(d_rx,rx,lelt*9*lxd*lyd*lzd,         
./trunk/nek/cmthybrid/level1.f:      istate = cudaMemcpy(d_jacmi,jacmi,lelt*lx1*ly1*lz1,         
./trunk/nek/cmthybrid/level1.f:      istate = cudaMemcpy(d_vols(1,1,1,1,1),vtrans,lelt*lx1*ly1*lz1,         
./trunk/nek/cmthybrid/level1.f:      istate = cudaMemcpy(d_vols(1,1,1,1,2),vx,lelt*lx1*ly1*lz1,         
./trunk/nek/cmthybrid/level1.f:      istate = cudaMemcpy(d_vols(1,1,1,1,3),vy,lelt*lx1*ly1*lz1,         
./trunk/nek/cmthybrid/level1.f:      istate = cudaMemcpy(d_vols(1,1,1,1,4),vz,lelt*lx1*ly1*lz1,         
./trunk/nek/cmthybrid/level1.f:      istate = cudaMemcpy(d_vols(1,1,1,1,5),pr,lelt*lx1*ly1*lz1,         
./trunk/nek/cmthybrid/level1.f:      istate = cudaMemcpy(d_iface_flux,iface_flux,lelt*6*lx1*lz1,         
./trunk/nek/cmthybrid/level1.f:      istate = cudaMemcpy(d_bm1,bm1,lelt*lx1*ly1*lz1,         
./trunk/nek/cmthybrid/level1.f:      istate = cudaMemcpy(d_res1,res1,lelt*lx1*ly1*lz1*toteq,         
./trunk/nek/cmthybrid/level1.f:      if (lelcmt.ne.lelt) then
./trunk/nek/cmthybrid/level1.f:         if (nio.eq.0) write(6,*)'ERROR! lelcmt is not same as lelt '
./trunk/nek/cmthybrid/level1.f:         if (nio.eq.0) write(6,*) 'lelcmt=',lelcmt,' lelt=',lelt
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_vols(lx1,ly1,lz1,lelt,5)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_vxd(lxd,lyd,lzd,lelt)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_vyd(lxd,lyd,lzd,lelt)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_vzd(lxd,lyd,lzd,lelt)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_u(lx1,ly1,lz1,toteq,lelt)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_w(lelt*lwkd)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_iface_flux(lx1*lz1*6,lelt)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_unx(lx1,lz1,6,lelt)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_uny(lx1,lz1,6,lelt)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_unz(lx1,lz1,6,lelt)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_all(lelt*6*lxd*lzd,26)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_jaco_c(lelt*6*lx1*lz1)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_area(lx1,lz1,6,lelt)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_phig(lx1,ly1,lz1,lelt)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_res1(lx1,ly1,lz1,lelt,toteq)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_bm1(lx1,ly1,lz1,lelt)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_totalh(lelt*3*lxd*lyd*lzd)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_ur(lelt*lxd*lyd*lzd) 
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_us(lelt*lxd*lyd*lzd)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_ut(lelt*lxd*lyd*lzd)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_ud(lelt*lxd*lyd*lzd)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_tu(lelt*lxd*lyd*lzd)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_rx(lxd*lyd*lzd,9,lelt)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_jacmi(lx1*ly1*lz1,lelt)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_vx(lx1,ly1,lz1,lelt)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_vy(lx1,ly1,lz1,lelt)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_vz(lx1,ly1,lz1,lelt)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_vtrans(lx1,ly1,lz1,lelt)
./trunk/nek/cmthybrid/level2.cuf:      real, device :: d_pr(lx1,ly1,lz1,lelt)
./trunk/nek/cmthybrid/level3.f:      common /shareddata/ num_sh, shArray(2, lelt*6)
./trunk/nek/coef.f:      real x(lx1,ly1,lz1,lelt)
./trunk/nek/comm_mpi.f:      parameter  (lt=lx1*ly1*lz1*lelt)
./trunk/nek/comm_mpi.f:      parameter  (lt=lx1*ly1*lz1*lelt)
./trunk/nek/comm_mpi.f:      parameter (lt=lx1*ly1*lz1*lelt)
./trunk/nek/comm_mpi.f:      parameter  (lt=lx1*ly1*lz1*lelt)
./trunk/nek/comm_mpi.f:      parameter  (lt=lx1*ly1*lz1*lelt)
./trunk/nek/conduct.f:      real bql(lx1*ly1*lz1,lelt)
./trunk/nek/conduct.f:      real bql(lx1,ly1,lz1,lelt)
./trunk/nek/conduct.f:      parameter (lt=lx1*ly1*lz1*lelt)
./trunk/nek/conduct.f:      real x(nx1,ny1,nz1,lelt)
./trunk/nek/conduct.f:      common /scrns/ ta(lx1,ly1,lz1,lelt)
./trunk/nek/conduct.f:     $              ,tb(lx1,ly1,lz1,lelt)
./trunk/nek/conduct.f:      common /scrvh/ h1(lx1,ly1,lz1,lelt)
./trunk/nek/conduct.f:     $              ,h2(lx1,ly1,lz1,lelt)
./trunk/nek/conduct.f:      common /scruz/ ta(lx1,ly1,lz1,lelt)
./trunk/nek/conduct.f:     $              ,h2(lx1,ly1,lz1,lelt)
./trunk/nek/conduct.f:      parameter (lt=lx1*ly1*lz1*lelt)
./trunk/nek/connect1.f:      common /ivrtx/ vertex ((2**ldim)*lelt)
./trunk/nek/connect1.f:      integer a(nx,ny,nz,lelt),val
./trunk/nek/connect1.f:      integer x(lx1,ly1,lz1,lelt)
./trunk/nek/connect1.f:      integer x(lx1,ly1,lz1,lelt)
./trunk/nek/connect1.f:      real x(lx1,ly1,lz1,lelt)
./trunk/nek/connect1.f:      real x(nx1,ny1,nz1,lelt)
./trunk/nek/connect1.f:      real x(nx1,ny1,nz1,lelt)
./trunk/nek/connect1.f:      real x(nx1,ny1,nz1,lelt)
./trunk/nek/connect1.f:      real x(nx2,ny2,nz2,lelt)
./trunk/nek/connect1.f:      real x(nx2,ny2,nz2,lelt)
./trunk/nek/connect1.f:      integer glo_num(lx1,ly1,lz1,lelt)
./trunk/nek/connect1.f:      integer glo_num(lx1,ly1,lz1,lelt)
./trunk/nek/connect1.f:     $    x(lx1*ly1*lz1*lelt)   ! signal
./trunk/nek/connect1.f:     $  , c(lx1*ly1*lz1*lelt)   ! counter
./trunk/nek/connect1.f:      integer glo_num(lx1,ly1,lz1,lelt)
./trunk/nek/connect1.f:      integer c(lx1*ly1*lz1*lelt)   ! counter
./trunk/nek/connect1.f:      integer x(lx1*ly1*lz1*lelt)   ! glonum
./trunk/nek/connect1.f:      common /ivrtx/ vertex ((2**ldim)*lelt)
./trunk/nek/connect1.f:      common /scrns/ enum(lxyz,lelt)
./trunk/nek/connect1.f:     $             ,  rnx(lxyz,lelt) , rny(lxyz,lelt) , rnz(lxyz,lelt)
./trunk/nek/connect1.f:     $             ,  tnx(lxyz,lelt) , tny(lxyz,lelt) , tnz(lxyz,lelt)
./trunk/nek/connect1.f:      common /scrsf/  jvrtex((2**ldim),lelt)
./trunk/nek/connect2.f:           do i = 1, lelt
./trunk/nek/connect2.f:          write(6,12) 'nelgt/nelgv/lelt:',nelgt,nelgv,lelt
./trunk/nek/connect2.f:      common /scrns/ tc(lx1,ly1,lz1,lelt),td(lx1,ly1,lz1,lelt)
./trunk/nek/connect2.f:     $             , ta(lx1,ly1,lz1,lelt),tb(lx1,ly1,lz1,lelt)
./trunk/nek/connect2.f:     $             , qmask(lx1,ly1,lz1,lelt)
./trunk/nek/connect2.f:      lcbc=18*lelt*(ldimt1 + 1)
./trunk/nek/connect2.f:      character*3 cbl(6,lelt)
./trunk/nek/connect2.f:      real         bl(5,6,lelt)
./trunk/nek/connect2.f:      character*3 cbl(6,lelt)
./trunk/nek/connect2.f:      real         bl(5,6,lelt)
./trunk/nek/connect2.f:      neltmx=np*lelt
./trunk/nek/connect2.f:          lelt_needed = nelgt/np
./trunk/nek/connect2.f:          if (mod(nelgt,np).ne.0) lelt_needed = lelt_needed + 1 
./trunk/nek/connect2.f:          write(6,12) lelt,lelg,lelt_needed,np,nelgt
./trunk/nek/connect2.f:     $         ,/,2X,'   number of elements/proc  (lelt):',i12
./trunk/nek/connect2.f:     $         ,/,2X,'   lelt >= ',i12,'  for np = ',i12
./trunk/nek/connect2.f:c           write(6,*)'help:',lelt,lelv,lelgv
./trunk/nek/connect2.f:      if (nelt.gt.lelt) then
./trunk/nek/connect2.f:        write(6,'(A,3I12)') 'ABORT: nelt>lelt!', nid, nelt, lelt
./trunk/nek/convect.f:      ln  = lx1*ly1*lz1*lelt
./trunk/nek/convect.f:      common /ctmp1/ work(lxyz1,lelt)
./trunk/nek/convect.f:      common /scruz/ phx  (lx1*ly1*lz1*lelt)
./trunk/nek/convect.f:     $ ,             phy  (lx1*ly1*lz1*lelt)
./trunk/nek/convect.f:     $ ,             phz  (lx1*ly1*lz1*lelt)
./trunk/nek/convect.f:     $ ,             hmsk (lx1*ly1*lz1*lelt)
./trunk/nek/convect.f:      common /scruz/ phi  (lx1*ly1*lz1*lelt)
./trunk/nek/convect.f:     $ ,             hmsk (lx1*ly1*lz1*lelt)
./trunk/nek/convect.f:      parameter(lf=lx1*lz1*2*ldim*lelt)
./trunk/nek/convect.f:     $             , glo_num_vol((lx1+2)*(ly1+2)*(lz1+2)*lelt)
./trunk/nek/convect.f:      real     faceary(lx1*lz1,2*ldim,lelt)
./trunk/nek/convect.f:      real     vol_ary(lx1,ly1,lz1,lelt)
./trunk/nek/convect.f:      real     faceary(lx1*lz1,2*ldim,lelt)
./trunk/nek/convect.f:      real     vol_ary(lx1,ly1,lz1,lelt)
./trunk/nek/convect.f:      real     faceary(lx1*lz1,2*ldim,lelt)
./trunk/nek/convect.f:      real     vol_ary(lx1,ly1,lz1,lelt)
./trunk/nek/convect.f:      common /ivrtx/ vertex ((2**ldim)*lelt)
./trunk/nek/convect.f:      parameter(lf=lx1*lz1*2*ldim*lelt)
./trunk/nek/convect.f:      parameter(lf=lx1*lz1*2*ldim*lelt)
./trunk/nek/convect.f:      real     rhs(lx1,ly1,lz1,lelt)
./trunk/nek/convect.f:     $               ,tmp(lx1*ly1*lz1*lelt)
./trunk/nek/cvode_driver.f:     &                ,y0(lx1*ly1*lz1*lelt*ldimt+1)
./trunk/nek/cvode_driver.f:     &                ,y   (lx1*ly1*lz1*lelt*ldimt)
./trunk/nek/cvode_driver.f:     &                ,FJV_(lx1*ly1*lz1*lelt*ldimt)
./trunk/nek/cvode_driver.f:     &                ,y   (lx1*ly1*lz1*lelt*ldimt)
./trunk/nek/cvode_driver.f:     &                ,vx_ (lx1,ly1,lz1,lelt)
./trunk/nek/cvode_driver.f:     &                ,vy_ (lx1,ly1,lz1,lelt)
./trunk/nek/cvode_driver.f:     &                ,vz_ (lx1,ly1,lz1,lelt)
./trunk/nek/cvode_driver.f:      real tmp(lx1,ly1,lz1,lelt)
./trunk/nek/diff.txt:>       real zenorms(lx1,lz1,6,lelt,3)
./trunk/nek/fast3d.f:     $              , llr(lelt),lls(lelt),llt(lelt)
./trunk/nek/fast3d.f:     $              , lmr(lelt),lms(lelt),lmt(lelt)
./trunk/nek/fast3d.f:     $              , lrr(lelt),lrs(lelt),lrt(lelt)
./trunk/nek/fast3d.f:     $              , llr(lelt),lls(lelt),llt(lelt)
./trunk/nek/fast3d.f:     $              , lmr(lelt),lms(lelt),lmt(lelt)
./trunk/nek/fast3d.f:     $              , lrr(lelt),lrs(lelt),lrt(lelt)
./trunk/nek/fast3d.f:     $              , llr(lelt),lls(lelt),llt(lelt)
./trunk/nek/fast3d.f:     $              , lmr(lelt),lms(lelt),lmt(lelt)
./trunk/nek/fast3d.f:     $              , lrr(lelt),lrs(lelt),lrt(lelt)
./trunk/nek/genbox.f:c     integer vertex((2**ldim)*lelt)    ! local -- 2D for now !?  long?
./trunk/nek/genbox.f:      if (nelt.gt.lelt.or.nelv.gt.lelv) then
./trunk/nek/genbox.f:         write(6,*) nid,' NEL too large:',nelt,nelv,lelv,lelt
./trunk/nek/genbox.f:      nbc = 5*6*lelt*(ldimt1+1)
./trunk/nek/gmres.f:      common /ivrtx/ vertex ((2**ldim)*lelt)
./trunk/nek/gmres.f:      common /cwork1/ v1(lxs,lys,lzs,lelt)
./trunk/nek/gmres.f:      real v1(lxs,lys,lzs,lelt)
./trunk/nek/gmres.f:      real v0(lx1,ly1,lz1,lelt)
./trunk/nek/gmres.f:     $              , llr(lelt),lls(lelt),llt(lelt)
./trunk/nek/gmres.f:     $              , lmr(lelt),lms(lelt),lmt(lelt)
./trunk/nek/gmres.f:     $              , lrr(lelt),lrs(lelt),lrt(lelt)
./trunk/nek/gmres.f:      real x(nx,nx,nz,lelt)
./trunk/nek/gmres.f:      integer x(nx,nx,nz,lelt)
./trunk/nek/hmholtz.f:      common /fastmd/ ifdfrm(lelt), iffast(lelt), ifh2, ifsolv
./trunk/nek/hmholtz.f:      parameter        (lg=lx1*ly1*lz1*lelt)
./trunk/nek/hmholtz.f:      integer kt(lelt,3)
./trunk/nek/hmholtz.f:     $             , mask(lx1,ly1,lz1,lelt)
./trunk/nek/hmholtz.f:      parameter        (lg=lx1*ly1*lz1*lelt)
./trunk/nek/hmholtz.f:      common /fastmd/ ifdfrm(lelt), iffast(lelt), ifh2, ifsolv
./trunk/nek/hmholtz.f:      parameter        (lg=lx1*ly1*lz1*lelt)
./trunk/nek/hmholtz.f:      real uf(nx1*nz1,2*ndim,lelt,2) 
./trunk/nek/hmholtz.f:      real u(nx1*nz1*2*ndim*lelt,2) 
./trunk/nek/hmholtz.f:      real w(nx1*nz1*2*ndim*lelt,2) 
./trunk/nek/hmholtz.f:      real s(lx1*lz1*2*ldim*lelt,2)
./trunk/nek/hmholtz.f:     $   , ut(nx1,ny1,nz1,nelt) , uf(nx1*nz1,2*ndim,lelt,2)
./trunk/nek/hmholtz.f:      parameter (lt=lx1*ly1*lz1*lelt)
./trunk/nek/hmholtz.f:      common /ctmp0/ ugunh(2*lx1*lz1*2*ldim*lelt)
./trunk/nek/hmholtz.f:     $                  ,w(2*lx1*lz1*2*ldim*lelt)
./trunk/nek/hsmg.f:      common /ivrtx/ vertex ((2**ldim)*lelt)
./trunk/nek/hsmg.f:     $              , llr(lelt),lls(lelt),llt(lelt)
./trunk/nek/hsmg.f:     $              , lmr(lelt),lms(lelt),lmt(lelt)
./trunk/nek/hsmg.f:     $              , lrr(lelt),lrs(lelt),lrt(lelt)
./trunk/nek/hsmg.f:      real x(n,n,1,lelt)
./trunk/nek/hsmg.f:      real x(n,n,1,lelt)
./trunk/nek/hsmg.f:      parameter (lt=lx1*ly1*lz1*lelt)
./trunk/nek/hsmg.f:      common /scrhi/ h2inv (lx1,ly1,lz1,lelt)
./trunk/nek/hsmg.f:      common /scrvh/ h1    (lx1,ly1,lz1,lelt),
./trunk/nek/hsmg.f:     $               h2    (lx1,ly1,lz1,lelt)
./trunk/nek/hsmg.f:      common /c_is1/ glo_num(lxyz*lelt)
./trunk/nek/hsmg.f:      common /ivrtx/ vertex ((2**ldim)*lelt)
./trunk/nek/hsmg.f:      common /ctmp1/ w(lx1*ly1*lz1*lelt*2)
./trunk/nek/ic.f:      ltott=lelt*nxyz1
./trunk/nek/ic.f:      ntotcv=lelt*nxyz1*toteq
./trunk/nek/ic.f:      real u(lx1,ly1,lz1,lelt)
./trunk/nek/ic.f:      real x3(lx3,ly3,lz3,lelt)
./trunk/nek/ic.f:      real x1(lx1,ly1,lz1,lelt)
./trunk/nek/ic.f:      parameter(lrbs=20*lx1*ly1*lz1*lelt)
./trunk/nek/ic.f:      integer e,ei,eg,msg_id(lelt)
./trunk/nek/ic.f:      parameter(lrbs=20*lx1*ly1*lz1*lelt)
./trunk/nek/ic.f:      integer e,ei,eg,msg_id(lelt)
./trunk/nek/ic.f:      parameter (lwk = 7*lx1*ly1*lz1*lelt)
./trunk/nek/induct.f:      real lf(lx1*ly1*lz1*ldim,lelt)
./trunk/nek/induct.f:      real b1(lx1*ly1*lz1,lelt)
./trunk/nek/induct.f:      real b2(lx1*ly1*lz1,lelt)
./trunk/nek/induct.f:      real b3(lx1*ly1*lz1,lelt)
./trunk/nek/lb_setqvol.f:      common /scrns/ vi(2,lx1*ly1*lz1*lelt)
./trunk/nek/lb_setqvol.f:      integer lb_imap(lx1*ly1*lz1*lelt)
./trunk/nek/lb_setqvol.f:      common /lbr/ buf(ldimt,lx1*ly1*lz1*lelt)
./trunk/nek/lb_setqvol.f:c     &                ,buf(ldimt,lx1*ly1*lz1*lelt)
./trunk/nek/lb_setqvol.f:      ltot = lx1*ly1*lz1*lelt
./trunk/nek/makenek.inc:      echo '      parameter(lelcmt = lelt  ) ! # of cmt elements '  >>SIZE
./trunk/nek/makenek.inc:      echo 'c IFCMT=TRUE  then lelcmt=lelt'  >>SIZE
./trunk/nek/makenek.inc.cmtbone:      echo '      parameter(lelcmt = lelt  ) ! # of cmt elements '  >>SIZE
./trunk/nek/makenek.inc.cmtbone:      echo 'c IFCMT=TRUE  then lelcmt=lelt'  >>SIZE
./trunk/nek/makenek.inc.cmtgpu:      echo '      parameter(lelcmt = lelt  ) ! # of cmt elements '  >>SIZE
./trunk/nek/makenek.inc.cmtgpu:      echo 'c IFCMT=TRUE  then lelcmt=lelt'  >>SIZE
./trunk/nek/makenek.inc.cmthybrid:      echo '      parameter(lelcmt = lelt  ) ! # of cmt elements '  >>SIZE
./trunk/nek/makenek.inc.cmthybrid:      echo 'c IFCMT=TRUE  then lelcmt=lelt'  >>SIZE
./trunk/nek/makeq.f:      common /SCRUZ/ w1(lx1,ly1,lz1,lelt)
./trunk/nek/map2.f:      common /ctmp0/ iwork(lelt)
./trunk/nek/map2.f:      npass = 1 + nelgt/lelt
./trunk/nek/map2.f:         m = min(m,lelt)
./trunk/nek/math.f:      common /scrsf/ w1 (lx1,ly1,lz1,lelt)
./trunk/nek/multimesh.f:      parameter (lt=lx1*ly1*lz1*lelt,lxyz=lx1*ly1*lz1)
./trunk/nek/multimesh.f:      real field(lx1*ly1*lz1*lelt,nfldmax)
./trunk/nek/mvmesh.f:      common /scrsf/ wvx(lx1*ly1*lz1,lelt)
./trunk/nek/mvmesh.f:     $             , wvy(lx1*ly1*lz1,lelt)
./trunk/nek/mvmesh.f:     $             , wvz(lx1*ly1*lz1,lelt)
./trunk/nek/mvmesh.f:      common /scrch/ wtx(lx1*ly1*lz1,lelt)
./trunk/nek/mvmesh.f:     $             , wty(lx1*ly1*lz1,lelt)
./trunk/nek/mvmesh.f:      common /scrmg/ wtz(lx1*ly1*lz1,lelt)
./trunk/nek/mvmesh.f:     $             , rnx(lx1*ly1*lz1,lelt)
./trunk/nek/mvmesh.f:     $             , rny(lx1*ly1*lz1,lelt)
./trunk/nek/mvmesh.f:     $             , rnz(lx1*ly1*lz1,lelt)
./trunk/nek/mvmesh.f:      common /scruz/ dsa(lx1*ly1*lz1,lelt)
./trunk/nek/mvmesh.f:     $             , qni(lx1*ly1*lz1,lelt)
./trunk/nek/mvmesh.f:     $             , smt(lx1*ly1*lz1,lelt)
./trunk/nek/mvmesh.f:     $             , ta (lx1*ly1*lz1,lelt)
./trunk/nek/mvmesh.f:      common /scruz/ prt  (lx1,ly1,lz1,lelt)
./trunk/nek/mxm_std.f:      parameter (lt=4*lx1*ly1*lz1*lelt)
./trunk/nek/navier0.f:      common /ivrtx/ vertex ((2**ldim)*lelt)
./trunk/nek/navier0.f:      common /scruz/ xbar(ldim,lelt),ibar(lelt)
./trunk/nek/navier1.f:      common /fastmd/ ifdfrm(lelt), iffast(lelt), ifh2, ifsolv
./trunk/nek/navier1.f:      common /fastmd/ ifdfrm(lelt), iffast(lelt), ifh2, ifsolv
./trunk/nek/navier1.f:      common /fastmd/ ifdfrm(lelt), iffast(lelt), ifh2, ifsolv
./trunk/nek/navier1.f:      common /fastmd/ ifdfrm(lelt), iffast(lelt), ifh2, ifsolv
./trunk/nek/navier1.f:      real mask(lxyz1,lelt)
./trunk/nek/navier1.f:      real wrk(lx1,ly1,lz1,lelt)
./trunk/nek/navier1.f:      real h2(lx1,ly1,lz1,lelt)
./trunk/nek/navier3.f:      common /scrprc/ uc(lx1*ly1*lz1*lelt)
./trunk/nek/navier3.f:      real x(lx2,ly2,lz2,lelt)
./trunk/nek/navier3.f:      real x(lx2,ly2,lz2,lelt)
./trunk/nek/navier4.f:      parameter(lt=lx1*ly1*lz1*lelt)
./trunk/nek/navier4.f:      parameter(lt=lx1*ly1*lz1*lelt)
./trunk/nek/navier4.f:      parameter  (lt=lx1*ly1*lz1*lelt)
./trunk/nek/navier4.f:      parameter  (lt=lx1*ly1*lz1*lelt)
./trunk/nek/navier4.f:      common /ctmp2/ w1   (lx1,ly1,lz1,lelt)
./trunk/nek/navier4.f:      parameter (lt=lx1*ly1*lz1*lelt)
./trunk/nek/navier5.f:      real wk1  (lx1,lx1,lx1,lelt)
./trunk/nek/navier5.f:      real a(lx1,lz1,6,lelt),area(lx1,lz1,6,lelt)
./trunk/nek/navier5.f:      real a(lx1,ly1,lz1,lelt),area(lx1,lz1,6,lelt)
./trunk/nek/navier5.f:      real xm0 (lx1,ly1,lz1,lelt)
./trunk/nek/navier5.f:      real ym0 (lx1,ly1,lz1,lelt)
./trunk/nek/navier5.f:      real zm0 (lx1,ly1,lz1,lelt)
./trunk/nek/navier5.f:      common /scrsf/         xm0(lx1,ly1,lz1,lelt)
./trunk/nek/navier5.f:     $,                      ym0(lx1,ly1,lz1,lelt)
./trunk/nek/navier5.f:     $,                      zm0(lx1,ly1,lz1,lelt)
./trunk/nek/navier5.f:      parameter (lt=lx1*ly1*lz1*lelt)
./trunk/nek/navier5.f:      common /scrsf/         xm0(lx1,ly1,lz1,lelt)
./trunk/nek/navier5.f:     $,                      ym0(lx1,ly1,lz1,lelt)
./trunk/nek/navier5.f:     $,                      zm0(lx1,ly1,lz1,lelt)
./trunk/nek/navier5.f:      real xm0 (lx1,ly1,lz1,lelt)
./trunk/nek/navier5.f:      real ym0 (lx1,ly1,lz1,lelt)
./trunk/nek/navier5.f:      real zm0 (lx1,ly1,lz1,lelt)
./trunk/nek/navier5.f:      common /scrns/ xb(lt,lelt),yb(lt,lelt),zb(lt,lelt)
./trunk/nek/navier5.f:      common /scruz/ tmsk(lt,lelt),tmlt(lt,lelt),w1(lt),w2(lt)
./trunk/nek/navier5.f:      common /scrmg/  ub(lx1*ly1*lz1*lelt)
./trunk/nek/navier5.f:      common /scrmg/  ub(lx1*ly1*lz1*lelt)
./trunk/nek/navier5.f:      common /ctmp1/ w(lt,lelt),ur(lt),us(lt),ut(lt),w1(2*lt)
./trunk/nek/navier5.f:      real d(lx1,ly1,lz1,lelt)
./trunk/nek/navier5.f:      real d(lx1,ly1,lz1,lelt)
./trunk/nek/navier5.f:      real dmin(lx1,ly1,lz1,lelt),emin(lx1,ly1,lz1,lelt)
./trunk/nek/navier5.f:      real xn(lx1,ly1,lz1,lelt),yn(lx1,ly1,lz1,lelt)
./trunk/nek/navier5.f:      real zn(lx1,ly1,lz1,lelt)
./trunk/nek/navier5.f:c     . d and m1 are work arrays of size (lx1,ly1,lz1,lelt), assumed persistant
./trunk/nek/navier5.f:c     common /myoutflow/ d(lx1,ly1,lz1,lelt),m1(lx1*ly1*lz1,lelt)
./trunk/nek/navier5.f:      real d(lx2,ly2,lz2,lelt),m1(lx1*ly1*lz1,lelt)
./trunk/nek/navier6.f:      parameter (lia = ltotd - 2 - 2*lelt)
./trunk/nek/navier6.f:      common /scrcg/ ntri(lelt+1),nmask(lelt+1)
./trunk/nek/navier7.f:      real x(lx1,ly1,lz1,lelt)
./trunk/nek/navier7.f:      integer x(lx1,ly1,lz1,lelt)
./trunk/nek/navier7.f:      integer x(lx2,ly2,lz2,lelt)
./trunk/nek/navier8.f:      common /scrpre/ uc(lcr*lelt),w(2*lx1*ly1*lz1)
./trunk/nek/navier8.f:      common /ivrtx/ vertex ((2**ldim)*lelt)
./trunk/nek/navier8.f:c         lda = 27*nxyz1*lelt
./trunk/nek/navier8.f:c         ldw =  7*nxyz1*lelt
./trunk/nek/navier8.f:      integer a(nx,ny,nz,lelt),val
./trunk/nek/navier8.f:      real uc(nxyz_c,lelt),uf(lxyz,lelt),w(1)
./trunk/nek/navier8.f:      real uc(nxyz_c,lelt),uf(lxyz,lelt),w(1)
./trunk/nek/navier8.f:      common /scrpre/ uc(lcr*lelt)
./trunk/nek/navier8.f:      common /scrpr2/ vc(lcr*lelt)
./trunk/nek/navier8.f:      real uc(2,2,ldim-1,lelt),uf(lxyz,lelt)
./trunk/nek/navier8.f:      common /ctmp0/ w(lx1,lx1,2),v(lx1,2,l2,lelt)
./trunk/nek/navier8.f:      real uc(lcr,lelt),uf(lx1,ly1,lz1,lelt)
./trunk/nek/navier8.f:      common /ctmp0/ w(2,2,lx1),v(2,ly1,lz1,lelt)
./trunk/nek/navier8.f:      common /ivrtx/ vertex ((2**ldim)*lelt)
./trunk/nek/navier8.f:      integer num_sh, num_cores, shArray(2, lelt*6)
./trunk/nek/navier8.f:      common /ivrtx/ vertex ((2**ldim),lelt)
./trunk/nek/navier8.f:      integer  edge(0:1,0:1,0:1,3,lelt),enum(12,lelt),fnum(6,lelt)
./trunk/nek/navier8.f:      integer etuple(4,12*lelt*nsafe),ftuple(5,6,lelt*nsafe)
./trunk/nek/navier8.f:      integer ind(12*lelt*nsafe)
./trunk/nek/navier8.f:      nmax = 12*lelt*nsafe  ! nsafe for crystal router factor of safety
./trunk/nek/navier8.f:      nmax = 6*lelt*nsafe  ! nsafe for crystal router factor of safety
./trunk/nek/navier8.f:      integer  edge(0:1,0:1,2,lelt),enum(4,lelt)
./trunk/nek/navier8.f:      integer etuple(4,4*lelt*nsafe),ind(4*lelt*nsafe)
./trunk/nek/navier8.f:      nmax = 4*lelt*nsafe  ! nsafe for crystal router factor of safety
./trunk/nek/pertsupport.f:      ltott=lx1*ly1*lz1*lelt
./trunk/nek/perturb.f:      common /scruz/ ta (lx1,ly1,lz1,lelt)
./trunk/nek/perturb.f:     $             , ua (lx1,ly1,lz1,lelt)
./trunk/nek/perturb.f:     $             , ub (lx1,ly1,lz1,lelt)
./trunk/nek/perturb.f:     $             , uc (lx1,ly1,lz1,lelt)
./trunk/nek/perturb.f:      ltott=lx1*ly1*lz1*lelt
./trunk/nek/postpro.f:      real w1(lxyz,lelt)
./trunk/nek/postpro.f:      real wk1  (lx1,lx1,lx1,lelt)
./trunk/nek/postpro.f:      n       = lx1*ly1*lz1*lelt 
./trunk/nek/postpro.f:c fieldin ... input field(s) to interpolate (lelt*lxyz,nfld)
./trunk/nek/postpro.f:      ltot = lelt*lx1*ly1*lz1
./trunk/nek/postpro.f:         if (imid.eq.2) call blank(ccurve,12*lelt)
./trunk/nek/postpro.f:         if (imid.eq.2) call blank(ccurve,12*lelt)
./trunk/nek/postpro.f:      common /outtmp/ wrk(lx1*ly1*lz1*lelt,nfldm)
./trunk/nek/postpro.f:      common /outtmp/ wrk (lx1*ly1*lz1*lelt,nfldm)
./trunk/nek/postpro.f:      parameter (lt2=2*lx1*ly1*lz1*lelt)
./trunk/nek/prepost.f:     $             , yax    (lx1,ly1,lelt)
./trunk/nek/prepost.f:      common /scrmg/ tax    (lx1,ly1,lelt,ldimt)
./trunk/nek/prepost.f:      common /scrvx/ ts   (lx1,ly1,lz1,lelt)
./trunk/nek/prepost.f:     $             , smult(lx1,ly1,lz1,lelt)
./trunk/nek/prepost.f:      common /scrsx/ sfx  (lx1,ly1,lz1,lelt)
./trunk/nek/prepost.f:     $             , sfy  (lx1,ly1,lz1,lelt)
./trunk/nek/prepost.f:     $             , sfz  (lx1,ly1,lz1,lelt)
./trunk/nek/prepost.f:      common /scrvh/ h1(lx1,ly1,lz1,lelt)
./trunk/nek/prepost.f:     $             , h2(lx1,ly1,lz1,lelt)
./trunk/nek/prepost.f:      common /scruz/ ta(lx1,ly1,lz1,lelt)
./trunk/nek/prepost.f:      common /SCRUZ/  ur1(lxo*lxo*lxo*lelt)
./trunk/nek/prepost.f:     &              , ur2(lxo*lxo*lxo*lelt)
./trunk/nek/prepost.f:     &              , ur3(lxo*lxo*lxo*lelt)
./trunk/nek/prepost.f:      parameter(ltot1=lx1*ly1*lz1*lelt)
./trunk/nek/prepost.f:      real*4 buffer(1+6*lelt)
./trunk/nek/prepost.f:      len  = 4 + 4*(n*lelt)   ! recv buffer size
./trunk/nek/prepost.f:      real*4 buffer(1+2*lelt)
./trunk/nek/prepost.f:      len  = 4 + 4*(n*lelt)    ! recv buffer size
./trunk/nek/prepost.f:      common /SCRNS/ u4(2+lxo*lxo*lxo*2*lelt)
./trunk/nek/prepost.f:      real*8         u8(1+lxo*lxo*lxo*1*lelt)
./trunk/nek/prepost.f:      len  = 8 + 8*(lelt*nxyz)  ! recv buffer size
./trunk/nek/prepost.f:      common /SCRNS/ u4(2+lxo*lxo*lxo*6*lelt)
./trunk/nek/prepost.f:      real*8         u8(1+lxo*lxo*lxo*3*lelt)
./trunk/nek/prepost.f:      len  = 8 + 8*(lelt*nxyz*ndim)   ! recv buffer size (u4)
./trunk/nek/prepost.f:      common /ctmp0/ lglist(0:lelt)
./trunk/nek/prepost.f:           len = 4*(lelt+1)
./trunk/nek/setprop.f:      common /screv/ sii (lx1,ly1,lz1,lelt),siii(lx1,ly1,lz1,lelt)
./trunk/nek/subs1.f:      common /screv/  dpc(lx1*ly1*lz1*lelt)
./trunk/nek/subs1.f:     $     ,          p1 (lx1*ly1*lz1*lelt)
./trunk/nek/subs1.f:      common /scrch/  p2 (lx1*ly1*lz1*lelt)
./trunk/nek/subs1.f:     $     ,          p3 (lx1*ly1*lz1*lelt)
./trunk/nek/subs1.f:      common /scrsl/  qq1(lx1*ly1*lz1*lelt)
./trunk/nek/subs1.f:     $     ,          qq2(lx1*ly1*lz1*lelt)
./trunk/nek/subs1.f:     $     ,          qq3(lx1*ly1*lz1*lelt)
./trunk/nek/subs1.f:      common /scrmg/  pp1(lx1*ly1*lz1*lelt)
./trunk/nek/subs1.f:     $     ,          pp2(lx1*ly1*lz1*lelt)
./trunk/nek/subs1.f:     $     ,          pp3(lx1*ly1*lz1*lelt)
./trunk/nek/subs1.f:     $     ,          wa (lx1*ly1*lz1*lelt)
./trunk/nek/subs1.f:      common /fastmd/ ifdfrm(lelt), iffast(lelt), ifh2, ifsolv
./trunk/nek/subs1.f:      common /fastmd/ ifdfrm(lelt), iffast(lelt), ifh2, ifsolv
./trunk/nek/subs1.f:      common /cpfjunk/ y(lx1*ly1*lz1*lelt,3)
./trunk/nek/subs1.f:      common /cpfjun2/ v(lx1*ly1*lz1*lelt,3)
./trunk/nek/subs1.f:      common /ctmp0/ wa (lx1,ly1,lz1,lelt)
./trunk/nek/subs1.f:      common /fastmd/ ifdfrm(lelt), iffast(lelt), ifh2, ifsolv
./trunk/nek/subs1.f:      common /ctmp0/ exz(lx1*ly1*lz1*lelt)
./trunk/nek/subs1.f:     $             , eyz(lx1*ly1*lz1*lelt)
./trunk/nek/subs1.f:      common /ctmp1/ exx(lx1*ly1*lz1*lelt)
./trunk/nek/subs1.f:     $             , exy(lx1*ly1*lz1*lelt)
./trunk/nek/subs1.f:     $             , eyy(lx1*ly1*lz1*lelt)
./trunk/nek/subs1.f:     $             , ezz(lx1*ly1*lz1*lelt)
./trunk/nek/subs1.f:      common /ctmp1/ txx(lx1,ly1,lz1,lelt)
./trunk/nek/subs1.f:     $             , txy(lx1,ly1,lz1,lelt)
./trunk/nek/subs1.f:     $             , tyy(lx1,ly1,lz1,lelt)
./trunk/nek/subs1.f:     $             , tzz(lx1,ly1,lz1,lelt)
./trunk/nek/subs1.f:      common /ctmp0/ txz(lx1,ly1,lz1,lelt)
./trunk/nek/subs1.f:     $             , tyz(lx1,ly1,lz1,lelt)
./trunk/nek/subs1.f:      common /scrsf/ t11(lx1,ly1,lz1,lelt)
./trunk/nek/subs1.f:     $             , t22(lx1,ly1,lz1,lelt)
./trunk/nek/subs1.f:     $             , t33(lx1,ly1,lz1,lelt)
./trunk/nek/subs1.f:     $             , hii(lx1,ly1,lz1,lelt)
./trunk/nek/subs1.f:      common /ctmp1/ txx(lx1,ly1,lz1,lelt)
./trunk/nek/subs1.f:     $             , txy(lx1,ly1,lz1,lelt)
./trunk/nek/subs1.f:     $             , tyy(lx1,ly1,lz1,lelt)
./trunk/nek/subs1.f:     $             , tzz(lx1,ly1,lz1,lelt)
./trunk/nek/subs1.f:      common /ctmp0/ txz(lx1,ly1,lz1,lelt)
./trunk/nek/subs1.f:     $             , tyz(lx1,ly1,lz1,lelt)
./trunk/nek/subs1.f:      common /scrsf/ ur(lx1,ly1,lz1,lelt)
./trunk/nek/subs1.f:     $             , us(lx1,ly1,lz1,lelt)
./trunk/nek/subs1.f:     $             , ut(lx1,ly1,lz1,lelt)
./trunk/nek/subs1.f:      integer kt(lelt,3)
./trunk/nek/subs1.f:      common /ctmp0/ gnum(lx1*ly1*lz1*lelt)
./trunk/nek/subs1.f:      common /scrcr2/ a1(lx1*ly1*lz1,lelt),w1(lx1*ly1*lz1,lelt)
./trunk/nek/subs1.f:     $              , a2(lx1*ly1*lz1,lelt),w2(lx1*ly1*lz1,lelt)
./trunk/nek/subs1.f:      common /scrcr3/ a3(lx1*ly1*lz1,lelt),w3(lx1*ly1*lz1,lelt)
./trunk/nek/subs1.f:      common /scrpr3/ uc1(lcr*lelt),uc2(lcr*lelt),uc3(lcr*lelt)
./trunk/nek/subs1.f:      common /scrpr2/ vc1(lcr*lelt),vc2(lcr*lelt),vc3(lcr*lelt)
./trunk/nek/subs1.f:      common /ivrtx/ vertex ((2**ldim)*lelt)
./trunk/nek/subs1.f:      common /scrcr1/ a(ldim*ldim*lcc*lcc*lelt)
./trunk/nek/subs1.f:      common /scrsf/ fr(lx1*ly1*lz1,lelt)
./trunk/nek/subs1.f:     $             , fs(lx1*ly1*lz1,lelt)
./trunk/nek/subs1.f:     $             , ft(lx1*ly1*lz1,lelt)
./trunk/nek/subs1.f:      real           wa(lx1,ly1,lz1,lelt)
./trunk/nek/subs1.f:      common /ctmp1/ w(lx1*ly1*lz1*lelt,ldim)
./trunk/nek/subs1.f:      common /cptst/ xs(lx1*ly1*lz1*lelt*ldim)
./trunk/nek/subs2.f:      common /screv/ ei2(lx1,ly1,lz1,lelt)
./trunk/nek/subs2.f:     $             , ei3(lx1,ly1,lz1,lelt)
./trunk/nek/subs2.f:      common /ctmp1/ exx(lx1,ly1,lz1,lelt)
./trunk/nek/subs2.f:     $             , exy(lx1,ly1,lz1,lelt)
./trunk/nek/subs2.f:     $             , eyy(lx1,ly1,lz1,lelt)
./trunk/nek/subs2.f:     $             , ezz(lx1,ly1,lz1,lelt)
./trunk/nek/subs2.f:      common /ctmp0/ exz(lx1,ly1,lz1,lelt)
./trunk/nek/subs2.f:     $             , eyz(lx1,ly1,lz1,lelt)
./trunk/nek/subs2.f:      common /screv/ hfmask(lx1,lz1,6,lelt)
./trunk/nek/subs2.f:     $             , hvmask(lx1,ly1,lz1,lelt)
./trunk/nek/subs2.f:      common /screv/ hfmask(lx1,lz1,6,lelt)
./trunk/nek/subs2.f:     $             , hvmask(lx1,ly1,lz1,lelt)
./trunk/nek/subs2.f:      common /scrcg/  vnmag(lx1,ly1,lz1,lelt)
./trunk/nek/subs2.f:      common /scrsf/ a1mask(lx1,ly1,lz1,lelt)
./trunk/nek/subs2.f:     $             , a2mask(lx1,ly1,lz1,lelt)
./trunk/nek/subs2.f:     $             , a3mask(lx1,ly1,lz1,lelt)
./trunk/nek/subs2.f:      common /ctmp0/ wa(lx1,ly1,lz1,lelt)
./trunk/nek/subs2.f:      common /ctmp1/ s1(lx1,ly1,lz1,lelt)
./trunk/nek/subs2.f:     $             , s2(lx1,ly1,lz1,lelt)
./trunk/nek/subs2.f:     $             , s3(lx1,ly1,lz1,lelt)
./trunk/nek/zero.usr:      real q(lx1, ly1, lz1, lelt)
./trunk/nek/zero_moab.usr:      real q(lx1, ly1, lz1, lelt)
